# important terms in that introduce by the Dark Lunching Technique and they lie at the heart of the devops
# also called DevOps life cycle phases
#- continuous monitoring	
#- continuous development	
#- continuous testing		
#- continuous integration
#- continuous deployment

# git is tool and GitHub is the repository 

# to change the configuration file of git
$ git config

# to set the name in configuration file of git 
$ git config --global user.name "Al Ogaidi, Mustafa"

# to set the email in configuration file of git
$ git config --global user.email "godric.phoenix@gmail.com"

# to get a list of different configuration command for git 
$ git config --list

# to get help on git
$ git help

# to get help on a specific command
$ git help <command>

# to start new project with git u need to create new folder 
$mkdir <name>

# to create new repository in the project folder
$ git init

# to view the hidden repository in a directory 
$ ls -al

# to see changes and the commits in a repo, to verify the status of git project
$ git status

# to commit the changes in any file we need first to add these changes to the git project, to add all changes (before using the command below u will see this phrase <Untracked files> and file(s) in red color)
$ git add .
# after using the command above u will see this phrase <Changes to be committed> and file(s) in green color.

# to add changes in a specific file 
$ git add <file name>

# to commit changes, (-m  ==> message)
$ git commit -m "any text"
# after using the command above is u use git status u will get this message <nothing to commit, working tree clean>
# if we do any changes to the file above like adding some text and use git status u will get this message <Changes not staged for commit>

# if we need to see all the commits logs inside the git
$ git log

# if u need to see the commit log for a particular member inside the git
$ git log --author="member name"

# the git workflow is --> working area ==> staging area ==> repository





# if u wanna to see the changes in ur repo area and ur working area, in another word the difference between local repo and local working area
$ git diff

# now to view the changes between staging area and repo
$ git diff --staged

# if u need to delete file in git, remove it from the working area using rm <file name>, or
$ git rm <file name>  --> if we using this command we will skip the next command since it will be staged already, we need to commit directly. 
$ git add .
$ git commit -m "message" 

# if u wanna to create a centralized repo in git hub
 -create new repo in GitHub
 -create new work area in ur computer
 -initialize the new work are using git init
 -copy the GitHub url using <clone>
 $ git remote add origin "GitHub url"
 -pull the changes from the GitHub
 $ git pull origin <branch>

 - if there's any issue with pull related to the history u can use this command.
 # go pull origin master --allow-unrelated-histories 

 -push the changes from local repo to GitHub
 $ git push origin master
 -we need to keep our local repo up to date with centralized repo.

# to create new branch <which is only a pointer not a real repo> use the following command
 $ git branch <branch name>

# now to switch the branch <after creating new branch>
$ git checkout <branch name>

# to view branches in git
$ git branch

# file created in a branch <not master> will not been seen in master until merge.
# after ensure that everything in the branch is ok u can merge the branch with master.
# if u wanna to push the content of a branch to GitHub please push it to a branch, even if it's not exist in the GitHub yet.

# if u wanna to merge with a specific branch for ex master, u need first to git checkout to the master and then use this command.
$ git merge <branch name>  <-- if only move commits from branch to another u can see <Fast-forward just move the pointer>
$ git push origin <branch name>   <--- GitHub

# to remove file from staging area and get it back to the working area
$ git reset HEAD <file name>

# to revert a commit from the local repo, changes will be back to the working area.
$ git reset HEAD~

# if u wanna to remove .git folder from ur project
$ rm -rf .git

# fork in GitHub mean create that target repo in ur private space or personal repo.

# to clone project from GitHub to our local work area.
$ git clone <url from github>

# to open commit file, it's best to connect it with text editor
$ git commit

# general notes when u use git  1. use add for any untracked files --> 2. commit them to local repo --> 3. pull the latest update from the centralize repo --> 4. use push

# to discard changes in file before staging, use
$ git checkout -- <file>

# if u wanna to remove file for example after u already commit all changes and for some reason u wanna to get it back
$ git rm <file name> ---> this will remove file from staging area as well working area !!!.
$ git reset HEAD <file name>
$ git checkout -- <file name>

# now if we remove file directly from the system <not using git>
$ rm <file name> 
$ git reset HEAD <file name>
$ git checkout -- <file name>

# now if u wanna to delete a tree of folders with files included.
$ git rm -rf <directory name>  ---> recursively delete
# when commit the change above it can't be get back.

# to rename file in git project
$ git mv <old file name> <new file name>

# there's different between using mv as os command and git mv, in the using of <mv> it will working only on the working area by delete the old named file and create new one. conversely the git mv will working on both working area and staging area as well, by rename the file from old name to the new name.


# to get more graphical and decorated view for git log we can use the command
$ git log --oneline --graph --decorate --all

# to search log for specific date use
$ git log --since="2 days ages"   <--- example

# if u wanna to find changes that been done for a specific file
$ git log -- <file name>

# now if u wanna to get details about any commit
$ git show <commit id, even the first 7 chars>

# to create alias for any long command <to make long command short>s
$ git config --global alias.<name> "command options>
$ git <alias name>  <-- how to use alias
$ git config --global alias.history "log --all --graph --decorate --oneline"  <== to use this alias $ git history

# for example if u wanna to do some change in the alias command after u create it. let say u need to remove --graph from it.
# u need to edit the config file 
$ nano ~/.gitcofig

# if u wanna to exclude the unwanted files in git
#- create hidden file called <.gitignore>
#.git ignore pattern:
#- <file name>
#- <*.123>
#- <folder name/>
$nano .gitignore


# if u wanna to create access.log file
$ nano access.log
# it will contain the following:
#- /status 200
#- /httpaccess 200
#- /mktsp 300
#- /dummy 3000

# if u wanna to create error.log file
$ nano error.log
#- Authen error response code is 400
#- Not able to connect to server
#- State elemnet reference
#- Array out of bound index

# now to exclude all .log file(s) from  git project
$ nano .gitignore
# *.log  <-- add this to .gitignore
 
# to compare a specific file between working area and staging area.
$ git diff <file name>

# to compare the changes between working area and repo
$ git diff HEAD <file name > <--- file name is optional

# to compare the changes between staging area and repo
$ git diff --staged HEAD <file name>

# to compare the changes between 2 commits
$ git diff <commit id 1> <commit id 2>

# to compare the changes between the last commit and -1 the last commit <previous the last commit>
$ git diff HEAD HEAD^

# to list all branches in the git as well the remote repo and branches.
$ git branch -a 

# to delete branch from git locally, but u need to be not in this branch
$ git branch -d <branch name>

# if u wanna to rename the branch
$ git branch -m <old branch name> <new branch name>

#if u wanna to add message with merge process
$ git merge <branch1> -m "Some Text"

# if u got this error message <CONFLICT (content): Merge conflict in file name> that's mean we have conflict issue in this file.
# to resolve the conflict issue above u need to edit the file and update it.

# git rebase is re-writing the project history by creating brand new commits for each commit, so it's move the entier feature branch to begining on the top of the master branch.

# u can create new branch by using 
$ git checkout -b <branch name>

# u can do both staging and commit at the same time
$ git commit -am "text"

# to rebase branch
$ git checkout <Feature_Branch>
$ git rebase <target branch>

# if we have any rebase conflict, first thing u need to do is to abort the mission.
$ git rebase --abort

# to find difference between branch and another branch
$ git diff <branch1> <branch2>

# to continue rebase process
$ git rebase --continue

# to skip the current patching in rebase process
$ git rebase --skip

# if u modify anything in the remote repo and u wanna to see this modifying reflected to the local repo
$ git fetch   <--- it will fetch out all the changes which present in the remote repo but not present in ur local machine

# must likely u'll see this message <Your branch and 'origin/master' have diverged,> that's mean remote repo and local repo are not in sync.
# now the question in the case above how we can rebase the local repo with remote repo, to pick all the changes that we have in the local repo (the local branch) and put it on the head of the changes in the remote branchs.
$ git pull --rebase origin master.

# this phrase (HEAD -> master, origin/master, origin/HEAD) mean both local and remote repo in sync.

# if u wanna to stash ur work and work with another urgent thing.
$ git stash 

# stash commands , Keep in ur mind stash working on stged area only. 
#- git stash 
#- git stash apply
#- git stash list
#- git stash drop

# if u wanna to know if there's any changes in the stash file
$ git stash list

# WIP = Working In Progress

# if u wanna to apply stash changes to ur working directory.
$ git stash apply

# after revert changes from the stash u need to drop it, otherwise it will confuse u. 
$ git stash drop

# to list files that tracked by git
$ git ls-files

# to stash untracked files or changes
$ git stash -u

# to stash all files
$ git stash -a

# to apply all stashed use
$ git stash pop

# to do stash with message, so u can use it later.
$ git stash save "Change in simple.html - stash with message"  <--- Error: Cannot save the current worktree state

# to see what actully in a specific stash (if we have multiple stashs) use
$ git stash show stash@{index#}

# if u wanna to apply specific stash on ur working dirctory.
$ git stash apply stash@{index#}
# remember to drop the specific stash # after using the command above.

# if u decide to clean stash queue <for example not needed > use
$ git stash clear

The upcoming scenario is to use one file in stage area, two files in working area, one file untracked.

# to add your stash to new branch.
$ git stash -a
# Please delete this file <sh.exe.stackdump>
$ git stash branch <branch name>

# to use git tagging we have multiple commands
$ git tag <tag name>
$ git tag --list  
$ git tag --delete <tag name>

# to create tag with some kind of message, annotated, we can use.
$ git tag -a <tag name>  ---> it will open editor to put ur message.

# to view the tag notes or message,
$ git show <tag name>

# to compare particular tags
$ git diff <tag name1> <tag name2>

# if u wanna to update specific commit in history
$ git tag -a <tag name> <commit id>

# if u wanna to update tag, if by mistake u tagged the wrong commit.
$ git tag -a <tag name> -f <new commit id>

# in case u put wrong message with git commit and u wanna to fix it.
$ git commit --amend -m <new message>

# to modify the old commit message
$ git rebase -i HEAD~3

# if u wanna after the target commit ID, all the file or changes will move to staging area.
$ git reset --soft <commit id>

# if u wanna after the target commit id, all the file or changes will move to the working area.
$ git reset <commit id>

# No data will left for recover.
$ git reset --hard <commit it>

# if we use reset --hard and we wanna to recover and track the changes that had been lost because of this reset. <about 30 days>
$ git reflog

# to move the git HEAD to specific commit id
$ git checkout <commit id>

# if for any reason have a lot of files and directories that had been created at some time in the git project directory.
# if we need to clean or git project directory.
$ git clean -df
