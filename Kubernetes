=============================================================== Kubernetes =======================================================

# Kubernetes is Open Source Orchestration system for Docker Containers.
# Kubernetes Implemented by Google.
# Kubernetes is a platform that eliminates the manual processes involved in deploying containerised applications.
# Kubernetes used to manage the State of Containers.
  - Start Containers on Specific Nodes.
  - Restart Containers when gets Killed.
  - Move containers one Node to Another.

# challenges without orchestration:
 i. increase the human cost of running service
 ii. increase the bills from cloud service provider
 iii. increase complexity of infrastructure 
 iv. scaling was very difficulty
 v. setting up services manually
 vi. manual fix if any node is crashed.

# let's take a look on Kubernetes features:
 - Automated Scheduling : Kubernetes provides advanced scheduler to launch container on cluster nodes based on their resource equirements and other constraints.
 - Healing Capabilities: Kubernetes allows to replaces and reschedules containers when nodes die. Kubernetes doesn’t allow Containers to use, until they get ready.
 - Auto Upgrade and RollBack : Kubernetes rolls out changes to the application or its configuration. Monitoring Application ensure that Kubernetes doesn’t kill all Instance at that time. If something goes wrong, with Kubernetes you can rollback the change.
 - Horizontal Scaling : Kubernetes can scale up and scale down the application as per the requirements with a simple command, using a UI, or automatically based on CPU usage.
 - Storage Orchestration : With Kubernetes, you can mount the storage system of your choice. You can either opt for local storage, or choose a public cloud provider.
 - Secret & Configuration Management : Kubernetes can help you deploy and update secrets and application configuration without rebuilding your image and without exposing secrets in your stack configuration.

 - You can Run Kubernetes Anywhere: 
   i. On-Premise(Own DataCenter)
   ii. Public Cloud(Google, AWS, Azure, DigitalOcean…)
   iii. Hybrid Cloud

---------------------------------------------------- Kubernetes Architecture ---------------------------------------------------

# Kuberentes architecture:
 - Kubernetes follow the Master - Slave(Worker) Node Architecture.
 - Master Node : Responsible for the management of Kubernetes cluster. It is mainly the entry point for all administrative tasks.
 - More than One Master Nodes be the there in Kubernetes Cluser.

 - Master Node: Entry Point for All Administrative Tasks.
 - Multiple Master Can be possible.
 - In Multi Master Node System, Single Master node will be commanding Node for own workers and other Masters too.
 - Main Master Node uses etcd to manage the Workers and Other Master Nodes.
 - API Server : API server is the entry point for all the REST commands used to control the cluster.
 - Resulting state of the cluster is stored in the distributed key-value store.
 - Controller : Regulates the Kubernetes cluster which manages the different non-terminating control loops.
 - Performs lifecycle functions such as namespace creation, event garbage collection, node garbage collection, etc.
 - Controller watches the desired state of the objects it manages and watches their current state through the API server.
 - If the current state of the objects it manages does not meet the desired state, then the control loop takes corrective steps to make sure that the current state is the same as the desired state.

 - Scheduler : Regulates the tasks on slave nodes. It stores the resource usage information for each slave node.
 - Schedules the work in the form of Pods and Services.
 - ETCD : Distributed key-value store which stores the cluster state.
 - Can be part of the Kubernetes Master, or, it can be configured externally.
 - It’s mainly used for shared configuration and service discovery.

 - Worker Node : It’s a physical server or you can say a VM which runs the applications using Pods.
 - Worker nodes contain all the necessary services to manage the networking between the containers, communicate with the master node, and assign resources to the scheduled containers.
 - Kubelet : It is an agent which communicates with the Master node and executes on nodes or the worker nodes.
 - Kubelet gets the configuration of a Pod from the API server and ensures that the described containers are up and running.


 - Pods : Is a group of one or more containers with shared storage/network, and a specification for how to run the containers.
 - Pods run on nodes and run together as a logical unit. 
 - Share the Same Shared content and same IP but reach other Pods via LocalHost.
 - Single Pod can Run on Multiple Machines and Single Machine can Run Multiple Pods.

 - Kube-Proxy : Kube-proxy runs on each node to deal with individual host sub-netting and ensure that the services are available to external parties.
 - Kube-proxy acts as a network proxy and a load balancer for a service on a single worker node.
 - It is the network proxy which runs on each worker node and listens to the API server for each Service endpoint creation/ deletion.


-------------------------------------------------- Kubernetes vs Docker Swarm --------------------------------------------------

1. Kubernetes and Docker Swarm are leading container orchestration tools.
2. Installation :
 - Setting Up Docker Swarm is very easy. We need just Two CLI Commands to start with Swarm.
 - Kubernetes Installation is complex and we need to execute few commands to Bring up the Cluster and then define the Environment, Network, and DashBoard. 

3. GUI :
 - Kubernetes have GUI, user can control the Complete Environment from Browser, No CLI commands required.
 - Docker Swarm has no GUI, user need to user CLI for swarm management.
4. Scalability :
 - Both Tools scale the System efficiently. No-one win here, 
 - Kubernetes is slightly better at maintaining the Cluster strength, whereas 
 - Swarm is slightly faster at scaling up(5x faster than K8s). 

5. Auto-Scaling :
 - The clear winner is Kubernetes. That is because, K8s are intelligent enough to analyze your server load, and scale up or down as per the requirement.
 - Docker Swarm doesn’t provide Auto-Scaling, When traffic pours manual intervention is the only way out.
6. Load Balancing :
 - Load Balancing is challenge with Kubernetes, you need to manually configure your load balancing settings.
 - Load balancing is simple with Swarm because, Swarm does auto load-balancing. There is no concept of Pods, and hence all the containers discover each other with a network IP address.

7. Rolling Upgrade & Roll-Back :
 - Kubernetes Supports the Rolling Upgrade and Auto Roll Back if it find something is fizzy with Cluser.
 - Swarm supports the Rolling Upgrade but no auto Roll Back feature is available.
8. Data Volumes :
 - Kubernetes allows us to share storage volumes between multiple containers inside the same Pod.
 - Docker Swarm allows us to share storage volumes with any other container.

9. Logging & Monitoring :
 - Kubernetes provides in-built tools for logging and monitoring.
 - With Swarm, you need to use third party tools like ELK.
 - Logging helps in quickly analyzing the logs and understanding where the problem lies in case of a failure.
 - Monitoring helps the Master to constantly be aware of the health status of nodes and the services Status.

=========================================================== End Of Kubernetes ====================================================